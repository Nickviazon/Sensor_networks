from tree_gen import tree_generator

while True:
    try:
        N = int(input('Введите число сенсоров в сети: '))
        break
    except ValueError:
        print('Вы ввели некоректное число, попробуйте снова!')

adjacency_matrices = [tree_generator(N)]

# adjacency_matrices = [
#
#     [[1, 1, 0, 0, 0],
#      [1, 1, 1, 0, 0],
#      [0, 1, 1, 1, 0],
#      [0, 0, 1, 1, 1],
#      [0, 0, 0, 1, 1]],
#
#
#     [[1, 1, 0, 0, 0, 0],
#      [1, 1, 1, 0, 0, 0],
#      [0, 1, 1, 1, 0, 0],
#      [0, 0, 1, 1, 1, 0],
#      [0, 0, 0, 1, 1, 1],
#      [0, 0, 0, 0, 1, 1]],
#
#     [[1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
#      [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
#      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
#      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
#      [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
#      [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
#      [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
#      [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
#      [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
#      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]],
#
#
#     [[1, 1, 0, 0, 0, 0],
#      [1, 1, 1, 1, 0, 1],
#      [0, 1, 1, 0, 0, 0],
#      [0, 1, 0, 1, 1, 0],
#      [0, 0, 0, 1, 1, 0],
#      [0, 1, 0, 0, 0, 1]],
#
#     [[1, 1, 0, 0, 0, 0, 0, 0, 0],
#      [1, 1, 1, 0, 0, 1, 0, 0, 0],
#      [0, 1, 1, 1, 1, 0, 0, 0, 0],
#      [0, 0, 1, 1, 0, 0, 0, 0, 0],
#      [0, 0, 1, 0, 1, 0, 0, 0, 0],
#      [0, 1, 0, 0, 0, 1, 1, 1, 0],
#      [0, 0, 0, 0, 0, 1, 1, 0, 0],
#      [0, 0, 0, 0, 0, 1, 0, 1, 1],
#      [0, 0, 0, 0, 0, 0, 0, 1, 1]],
#
#     [[1, 1, 0, 0, 0, 0, 0, 0, 0],
#      [1, 1, 1, 1, 1, 0, 0, 0, 1],
#      [0, 1, 1, 0, 0, 0, 0, 0, 0],
#      [0, 1, 0, 1, 0, 0, 0, 0, 0],
#      [0, 1, 0, 0, 1, 1, 1, 1, 0],
#      [0, 0, 0, 0, 1, 1, 0, 0, 0],
#      [0, 0, 0, 0, 1, 0, 1, 0, 0],
#      [0, 0, 0, 0, 1, 0, 0, 1, 0],
#      [0, 1, 0, 0, 0, 0, 0, 0, 1]],
#
#     [[1, 1, 0, 0, 0, 1],
#      [1, 1, 1, 1, 0, 0],
#      [0, 1, 1, 0, 1, 0],
#      [0, 1, 0, 1, 0, 0],
#      [0, 0, 1, 0, 1, 0],
#      [1, 0, 0, 0, 0, 1]],
#
#     [[1, 1, 0, 0, 0, 1, 0, 0, 0],
#      [1, 1, 1, 1, 0, 0, 0, 0, 0],
#      [0, 1, 1, 0, 1, 0, 0, 0, 0],
#      [0, 1, 0, 1, 0, 0, 0, 0, 0],
#      [0, 0, 1, 0, 1, 0, 0, 0, 0],
#      [1, 0, 0, 0, 0, 1, 1, 1, 0],
#      [0, 0, 0, 0, 0, 1, 1, 0, 0],
#      [0, 0, 0, 0, 0, 1, 0, 1, 1],
#      [0, 0, 0, 0, 0, 0, 0, 1, 1]],
#
#     [[1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
#      [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#      [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#      [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#      [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#      [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
#      [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
#      [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
#      [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0],
#      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
#      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
#      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
#      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1],
#      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
#      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]],
#
# ]
